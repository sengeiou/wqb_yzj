<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!-- 加载数据库属性配置文件 -->
<!-- 	<context:property-placeholder location="classpath:/properties/log4j.properties" /> -->

	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="[%p] %d [%c{1}.%M] - %m%n" />
		</layout>
	</appender>

	<!-- 将日志信息输出到文件，但是当文件的大小达到某个阈值的时候，日志文件会自动回滚 -->
	<appender name="file" class="org.apache.log4j.DailyRollingFileAppender">
	    <!-- 设置日志信息输出文件全路径名 -->
<!-- 		<param name="File" value="D:/wqb/sys/info.log" /> -->
<!-- 		<param name="File" value="${log.url}" /> -->
		<param name="File" value="/usr/local/servers/tomcat/wqblog/sys/info.log" />
		<param name="encoding" value="utf-8" />
		<param name="Threshold" value="info" />
		<!-- 设置是否在重新启动服务时，在原有日志的基础添加新日志 -->
		<param name="Append" value="true" />
		<param name="DatePattern" value="'.'yyyy-MM-dd'.log'" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="[%p] %d [%c.%M] - %m%n" />
		</layout>
	</appender>

	<!-- 将日志信息输出到文件，可以配置多久产生一个新的日志信息文件 -->
	<appender name="userLoginInfo" class="org.apache.log4j.DailyRollingFileAppender">
	    <!-- 设置日志信息输出文件全路径名 -->
<!-- 		<param name="File" value="D:/wqb/test/log.log" /> -->
	<param name="File" value="/usr/local/servers/tomcat/wqblog/sys/info.log" />
		<param name="encoding" value="utf-8" />
		<param name="Threshold" value="INFO" />
		<param name="Append" value="true" />
		 <!-- 设置日志每分钟回滚一次，即产生一个新的日志文件 -->
		<param name="DatePattern" value="'.'yyyy-MM-dd'.log'" />
		<layout class="org.apache.log4j.PatternLayout">
		     <!-- 设置日志输出的格式 -->
			<param name="ConversionPattern" value="[%p] %d [%c.%M] - %m%n" />
		</layout>
		<!--限制输出级别 -->
		<filter class="org.apache.log4j.varia.LevelRangeFilter">
			<param name="LevelMax" value="INFO" />
			<param name="LevelMin" value="INFO" />
		</filter>
	</appender>

	   <!--
     注意：
     1：当additivity="false"时，root中的配置就失灵了，不遵循缺省的继承机制
     2：logger中的name非常重要，它代表记录器的包的形式，有一定的包含关系，试验表明
        2-1：当定义的logger的name同名时，只有最后的那一个才能正确的打印日志
        2-2：当对应的logger含有包含关系时，比如：name=test.log4j.test8 和 name=test.log4j.test8.UseLog4j，则2-1的情况是一样的
        2-3：logger的name表示所有的包含在此名的所有记录器都遵循同样的配置，name的值中的包含关系是指记录器的名称哟！注意啦！
     3：logger中定义的level和appender中的filter定义的level的区间取交集
     4：如果appender中的filter定义的 levelMin > levelMax ，则打印不出日志信息
     -->

      <!-- 指定logger的设置，additivity指示是否遵循缺省的继承机制-->
	<logger name="com.ibatis" additivity="true">
		<level value="DEBUG" />
	</logger>

	 <!--指定logger的设置，additivity指示是否遵循缺省的继承机制 -->
	<logger name="java.sql.Connection" additivity="true">
		<level value="DEBUG" />
	</logger>

	 <!--指定logger的设置，additivity指示是否遵循缺省的继承机制 -->
	<logger name="java.sql.Statement" additivity="true">
		<level value="DEBUG" />
	</logger>

	 <!--指定logger的设置，additivity指示是否遵循缺省的继承机制 -->
	<logger name="java.sql.PreparedStatement" additivity="true">
		<level value="DEBUG" />
	</logger>

	 <!--指定logger的设置，additivity指示是否遵循缺省的继承机制 -->
	<logger name="java.sql.ResultSet" additivity="true">
		<level value="DEBUG" />
	</logger>

	<!-- 根logger的设置-->
	<root>
		<level value="info" />
		<appender-ref ref="console" />
		<appender-ref ref="file" />
		<appender-ref ref="userLoginInfo" />
	</root>
</log4j:configuration>
